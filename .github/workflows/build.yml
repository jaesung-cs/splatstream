name: Build Python Package

on:
  push:
    branches: [ feature/test_ci ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup Vulkan SDK
      uses: humbletim/setup-vulkan-sdk@v1.2.1
      with:
        vulkan-query-version: 1.4.328.1
        vulkan-components: Vulkan-Headers, Vulkan-Loader, Glslang, SPIRV-Tools
        vulkan-use-cache: true

    - name: Download Slang Compiler
      run: |
        # Download slangc binary based on platform
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          curl -L -o slang-linux.tar.gz https://github.com/shader-slang/slang/releases/download/v2025.19.1/slang-v2025.19.1-linux-x64.tar.gz
          tar -xzf slang-linux.tar.gz
          sudo cp slang-v2025.19.1-linux-x64/bin/slangc /usr/local/bin/
          sudo chmod +x /usr/local/bin/slangc
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          curl -L -o slang-macos.tar.gz https://github.com/shader-slang/slang/releases/download/v2025.19.1/slang-v2025.19.1-macos-universal.tar.gz
          tar -xzf slang-macos.tar.gz
          sudo cp slang-v2025.19.1-macos-universal/bin/slangc /usr/local/bin/
          sudo chmod +x /usr/local/bin/slangc
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          curl -L -o slang-windows.zip https://github.com/shader-slang/slang/releases/download/v2025.19.1/slang-v2025.19.1-windows-x64.zip
          Expand-Archive slang-windows.zip -DestinationPath C:\slang
          echo "C:\slang\slang-v2025.19.1-windows-x64\bin" >> $env:GITHUB_PATH
        fi
  
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build wheel

    - name: Build package
      run: |
        cd binding
        python -m build --wheel

    - name: Test package installation
      run: |
        cd binding
        pip install dist/*.whl

    - name: Run basic tests
      run: |
        cd binding
        python -c "import pygs; print('Package imported successfully')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pygs-${{ matrix.os }}-py${{ matrix.python-version }}
        path: binding/dist/
