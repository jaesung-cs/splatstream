#version 460 core

#extension GL_EXT_shader_16bit_storage : require

layout(local_size_x = 256) in;

layout(push_constant) uniform PushConstant {
  uint point_count;
  uint sh_degree;
};

layout(std430, binding = 0) readonly buffer GaussianPly {
  uint offsets[60];  // pos(3), scale(3), rot(4), sh(48), opacity(1)
  float ply[];       // (N, M)
};

layout(std430, binding = 1) writeonly buffer GaussianPosition {
  float gaussian_position[];  // (N, 3)
};

layout(std430, binding = 2) writeonly buffer GaussianCov3d {
  float gaussian_cov3d[];  // (N, 6)
};

layout(std430, binding = 3) writeonly buffer GaussianOpacity {
  float gaussian_opacity[];  // (N)
};

layout(std430, binding = 4) writeonly buffer GaussianSh {
  f16vec4 gaussian_sh[];  // (N, K), packed.
};

float sigmoid(float x) { return 1.f / (1.f + exp(-x)); }

shared uint local_offsets[60];

void main() {
  uint id = gl_GlobalInvocationID.x;

  // TODO: offsets in push constant?
  if (gl_LocalInvocationID.x < 60) {
    local_offsets[gl_LocalInvocationID.x] = offsets[gl_LocalInvocationID.x];
  }
  barrier();

  if (id < point_count) {
    // calculate covariance
    uint base = local_offsets[59];
    vec3 s =
        vec3(ply[base * id + local_offsets[3]], ply[base * id + local_offsets[4]], ply[base * id + local_offsets[5]]);
    s = exp(s);  // activation

    vec4 q = vec4(ply[base * id + local_offsets[6]], ply[base * id + local_offsets[7]],
                  ply[base * id + local_offsets[8]], ply[base * id + local_offsets[9]]);
    q = q / length(q);

    mat3 rot;
    float xx = q.x * q.x;
    float yy = q.y * q.y;
    float zz = q.z * q.z;
    float xy = q.x * q.y;
    float xz = q.x * q.z;
    float yz = q.y * q.z;
    float wx = q.w * q.x;
    float wy = q.w * q.y;
    float wz = q.w * q.z;
    rot[0][0] = 1.f - 2.f * (yy + zz);
    rot[0][1] = 2.f * (xy + wz);
    rot[0][2] = 2.f * (xz - wy);
    rot[1][0] = 2.f * (xy - wz);
    rot[1][1] = 1.f - 2.f * (xx + zz);
    rot[1][2] = 2.f * (yz + wx);
    rot[2][0] = 2.f * (xz + wy);
    rot[2][1] = 2.f * (yz - wx);
    rot[2][2] = 1.f - 2.f * (xx + yy);

    mat3 ss = mat3(0.f);
    ss[0][0] = s[0] * s[0];
    ss[1][1] = s[1] * s[1];
    ss[2][2] = s[2] * s[2];
    mat3 cov3d = rot * ss * transpose(rot);

    gaussian_cov3d[6 * id + 0] = cov3d[0][0];
    gaussian_cov3d[6 * id + 1] = cov3d[1][0];
    gaussian_cov3d[6 * id + 2] = cov3d[2][0];
    gaussian_cov3d[6 * id + 3] = cov3d[1][1];
    gaussian_cov3d[6 * id + 4] = cov3d[2][1];
    gaussian_cov3d[6 * id + 5] = cov3d[2][2];

    gaussian_position[3 * id + 0] = ply[base * id + local_offsets[0]];
    gaussian_position[3 * id + 1] = ply[base * id + local_offsets[1]];
    gaussian_position[3 * id + 2] = ply[base * id + local_offsets[2]];

    if (sh_degree == 0) {
      gaussian_sh[id] = f16vec4(vec4(ply[base * id + local_offsets[10 +  0]], ply[base * id + local_offsets[10 + 16]], ply[base * id + local_offsets[10 + 32]], 0.f));
    } else if (sh_degree == 1) {
      gaussian_sh[3 * id + 0] = f16vec4(vec4(ply[base * id + local_offsets[10 +  0]], ply[base * id + local_offsets[10 +  1]], ply[base * id + local_offsets[10 +  2]], ply[base * id + local_offsets[10 +  3]]));
      gaussian_sh[3 * id + 1] = f16vec4(vec4(ply[base * id + local_offsets[10 + 16]], ply[base * id + local_offsets[10 + 17]], ply[base * id + local_offsets[10 + 18]], ply[base * id + local_offsets[10 + 19]]));
      gaussian_sh[3 * id + 2] = f16vec4(vec4(ply[base * id + local_offsets[10 + 32]], ply[base * id + local_offsets[10 + 33]], ply[base * id + local_offsets[10 + 34]], ply[base * id + local_offsets[10 + 35]]));
    } else if (sh_degree == 2) {
      gaussian_sh[7 * id + 0] = f16vec4(vec4(ply[base * id + local_offsets[10 +  0]], ply[base * id + local_offsets[10 +  1]], ply[base * id + local_offsets[10 +  2]], ply[base * id + local_offsets[10 +  3]]));
      gaussian_sh[7 * id + 1] = f16vec4(vec4(ply[base * id + local_offsets[10 +  4]], ply[base * id + local_offsets[10 +  5]], ply[base * id + local_offsets[10 +  6]], ply[base * id + local_offsets[10 +  7]]));
      gaussian_sh[7 * id + 2] = f16vec4(vec4(ply[base * id + local_offsets[10 + 16]], ply[base * id + local_offsets[10 + 17]], ply[base * id + local_offsets[10 + 18]], ply[base * id + local_offsets[10 + 19]]));
      gaussian_sh[7 * id + 3] = f16vec4(vec4(ply[base * id + local_offsets[10 + 20]], ply[base * id + local_offsets[10 + 21]], ply[base * id + local_offsets[10 + 22]], ply[base * id + local_offsets[10 + 23]]));
      gaussian_sh[7 * id + 4] = f16vec4(vec4(ply[base * id + local_offsets[10 + 32]], ply[base * id + local_offsets[10 + 33]], ply[base * id + local_offsets[10 + 34]], ply[base * id + local_offsets[10 + 35]]));
      gaussian_sh[7 * id + 5] = f16vec4(vec4(ply[base * id + local_offsets[10 + 36]], ply[base * id + local_offsets[10 + 37]], ply[base * id + local_offsets[10 + 38]], ply[base * id + local_offsets[10 + 39]]));
      gaussian_sh[7 * id + 6] = f16vec4(vec4(ply[base * id + local_offsets[10 +  8]], ply[base * id + local_offsets[10 + 24]], ply[base * id + local_offsets[10 + 40]], 0.f));
    } else if (sh_degree == 3) {
#pragma unroll
      for (int i = 0; i < 12; ++i) {
        gaussian_sh[12 * id + i] = f16vec4(vec4(
          ply[base * id + local_offsets[10 + 4 * i + 0]],
          ply[base * id + local_offsets[10 + 4 * i + 1]],
          ply[base * id + local_offsets[10 + 4 * i + 2]],
          ply[base * id + local_offsets[10 + 4 * i + 3]]
        ));
      }
    }

    gaussian_opacity[id] = sigmoid(ply[base * id + local_offsets[58]]);
  }
}
